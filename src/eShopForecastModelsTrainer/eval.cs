/*
This file is auto-generated by TLC machine learning toolkit (http://tlc/).
*/
using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.MachineLearning;
using Microsoft.MachineLearning.Api;
using Microsoft.MachineLearning.Data;

namespace TLCGeneratedCode
{
    public class Program
    {
        /// <summary>
        /// This is the input to the trained model.
        ///
        /// In most pipelines, not all columns that are used in training are also used in scoring. Namely, the label 
        /// and weight columns are almost never required at scoring time. Since TLC doesn't know which columns 
        /// are 'optional' in this sense, all the columns are listed below.
        ///
        /// You are free to remove any fields from the below class. If the fields are not required for scoring, the model 
        /// will continue to work. Otherwise, the exception will be thrown when a prediction engine is created.
        /// </summary>
        public class Example
        {
            public Single Label;

            public string country;

            public Single year;

            public Single month;

            public Single sales;

            public Single avg;

            public Single count;

            public Single max;

            public Single min;

            public Single p_max;

            public Single p_med;

            public Single p_min;

            public Single std;

            public Single prev;
        }

        /// <summary>
        /// This is the output of the scored model, the prediction.
        /// </summary>
        public class ScoredExample
        {
            // Below columns are produced by the model's predictor.
            public Single Score;

            // These are all remaining available columns, either supplied as the input, or intermediate
            // columns generated by the transforms. Materializing these columns has a performance cost,
            // so they are commented out. Feel free to uncomment any column that is useful for your scenario.
#if false
            public Single Label;

            public string country;

            public Single year;

            public Single month;

            public Single sales;

            public Single avg;

            public Single count;

            public Single max;

            public Single min;

            public Single p_max;

            public Single p_med;

            public Single p_min;

            public Single std;

            public Single prev;

            [VectorType(12)]
            public Single[] NumericalFeatures;

            [VectorType(20)]
            public Single[] CategoryFeatures;

            [VectorType(32)]
            public Single[] Features;
#endif
        }

        public static void Main(string[] args)
        {
            string modelPath;
            modelPath = ".\\bin\\Debug\\netcoreapp2.0\\data\\model.zip";

            ExamplePredictOne(modelPath);
            ExamplePredictBatch(modelPath);
        }

        /// <summary>
        /// This method demonstrates how to run prediction on one example at a time.
        /// </summary>
        public static void ExamplePredictOne(string modelPath)
        {
            var env = new TlcEnvironment(conc: 1);

            var predictionEngine = CreatePredictionEngine(env, modelPath);

            var inputExample = new Example();
            // TODO: populate the example's features.

            ScoredExample score = predictionEngine.Predict(inputExample);
            // TODO: consume the resulting scores.
        }

        /// <summary>
        /// This method demonstrates how to run prediction for multiple examples as 
        /// a single batch.
        /// </summary>
        public static void ExamplePredictBatch(string modelPath)
        {
            var env = new TlcEnvironment();

            var predictionEngine = CreateBatchPredictionEngine(env, modelPath);

            IEnumerable<Example> inputExamples = new[] { new Example(), new Example() };
            // TODO: populate the examples' features.

            IEnumerable<ScoredExample> scores = predictionEngine.Predict(inputExamples, reuseRowObjects: true);
            // TODO: consume the resulting scores.

            // Note that 'reuseRowObject' parameter controls whether we create a new example
            // object for every row (if false), or we keep returning the same example object 
            // over and over (if true). 

            // The latter provides massive performance benefits, but if we want to retain all
            // the predictions in memory together, 'false' must be used.
        }

        /// <summary>
        /// This function creates a prediction engine from the model located in the <paramref name="modelPath"/>.
        /// </summary>
        public static PredictionEngine<Example, ScoredExample> CreatePredictionEngine(IHostEnvironment env, string modelPath)
        {
            using (var fs = File.OpenRead(modelPath))
                return env.CreatePredictionEngine<Example, ScoredExample>(fs);
        }

        /// <summary>
        /// This function creates a batch prediction engine from the model located in the <paramref name="modelPath"/>.
        /// </summary>
        public static BatchPredictionEngine<Example, ScoredExample> CreateBatchPredictionEngine(IHostEnvironment env, string modelPath)
        {
            using (var fs = File.OpenRead(modelPath))
                return env.CreateBatchPredictionEngine<Example, ScoredExample>(fs);
        }
    }
}
