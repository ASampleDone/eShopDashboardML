/*
This file is auto-generated by TLC machine learning toolkit (http://tlc/).
*/
using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.MachineLearning;
using Microsoft.MachineLearning.Runtime;
using Microsoft.MachineLearning.Runtime.Api;
using Microsoft.MachineLearning.Runtime.Data;
using System.Threading.Tasks;

namespace eShopDashboard.Forecasting
{
    public class ProductData
    {
        public ProductData(string productId, int year, int month, float units, float avg, int count, float max, float min, float prev,
            float price, string color, string size, string shape, string agram, string bgram, string ygram, string zgram)
        {
            this.productId = productId;
            this.year = year;
            this.month = month;
            this.units = units;
            this.avg = avg;
            this.count = count;
            this.max = max;
            this.min = min;
            this.prev = prev;
            this.price = price;

            this.color = color;
            this.size = size;
            this.shape = shape;
            this.agram = agram;
            this.bgram = bgram;
            this.ygram = ygram;
            this.zgram = zgram;
        }

        [ColumnName("Label")]
        public float next;

        public string productId;
        public float year;
        public float month;
        public float units;
        public float avg;
        public float count;
        public float max;
        public float min;
        public float prev;
        public float price;
        public string color;
        public string size;
        public string shape;
        public string agram;
        public string bgram;
        public string ygram;
        public string zgram;
    }

    /// <summary>
    /// This is the output of the scored model, the prediction.
    /// </summary>
    public class ProductUnitPrediction
    {
        public float Score;
    }

    public class ProductSales : IProductSales
    {
        public async Task<ProductUnitPrediction> Predict(string modelPath, string productId, int year, int month, float units, float avg, int count, float max, float min, float prev,
            float price, string color, string size, string shape, string agram, string bgram, string ygram, string zgram)
        {
            var env = new TlcEnvironment(conc: 1);

            var predictionEngine = await CreatePredictionEngineAsync(env, modelPath);

            var inputExample = new ProductData(productId, year, month, units, avg, count, max, min, prev, price, color, size, shape, agram, bgram, ygram, zgram);

            ProductUnitPrediction score = predictionEngine.Predict(inputExample);
            return score;
        }

        /// <summary>
        /// This function creates a prediction engine from the model located in the <paramref name="modelPath"/>.
        /// </summary>
        private async Task<PredictionModel<ProductData, ProductUnitPrediction>> CreatePredictionEngineAsync(IHostEnvironment env, string modelPath)
        {
            PredictionModel<ProductData, ProductUnitPrediction> model = await PredictionModel.ReadAsync<ProductData, ProductUnitPrediction>(modelPath);
            return model;
        }
    }
}
